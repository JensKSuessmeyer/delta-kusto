name:  Release

on:
  workflow_dispatch:
  push:
    branches:
      - release/prod/*

jobs:
  # This is the release job, integrating work from windows + linux job
  # see https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs
  release:
    # This creates a dependency with the previous job so they do not run in parallel
    # (which would wreck the integration tests)
    needs:
    - linux
    - windows
    runs-on: ubuntu-latest
    steps:
    # We do not need the source code but we need git for tags & release
    - uses: actions/checkout@v2
    # Retrieve assets
    - uses: actions/download-artifact@master
      with:
        name: linux-assets
        path: linux-assets
    - uses: actions/download-artifact@master
      with:
        name: windows-assets
        path: windows-assets
    - run:  ls -l linux-assets
    - run:  ls -l windows-assets
    # See https://cli.github.com/manual/gh_auth
    - name: Authentication gh CLI
      run:  |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    # See https://cli.github.com/manual/gh_release
    - name: Create full version release
      run:  |
        # Retrieve content of full-version from artefact
        fullVersion=$(cat linux-assets/full-version.txt)
        # Create the release
        gh release create -d $fullVersion \
          linux-assets/delta-kusto-linux.tar.gz \
          windows-assets/delta-kusto-windows.zip

  # Linux job, builds the Linux asset
  linux:

    runs-on: ubuntu-latest
    
    env:
      dotnetOs:  linux-x64
      assetsName:  linux-assets
      assetSuffix:  linux
      execName:  delta-kusto

    steps:
    - uses: actions/checkout@v2
    - name: Patch version
      id:  patch-version
      run: python3 deployment/patch-version.py code/delta-kusto/delta-kusto.csproj ${{ github.run_number }}
    - name:  Output full version
      shell:  bash
      run:  |
        echo "Full version:  ${{ steps.patch-version.outputs.full-version }}"
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore
    - name: Install dependencies
      shell:  bash
      run: dotnet restore code
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
    - name: Build
      shell:  bash
      run: dotnet build code --configuration Release --no-restore
    # See https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#user-experience
    # & https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file
    # & https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
    - name: Build single file executable
      shell:  bash
      run: |
        dotnet publish code/delta-kusto -c release -r $dotnetOs \
          -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=true -p:PublishReadyToRun=true \
          -o bin
    - name: Zip executable
      shell:  bash
      run:  tar -czvf bin/delta-kusto-$assetSuffix.tar.gz bin/$execName
    - name: Create artefact directory
      shell:  bash
      run:  mkdir $assetsName
    # Output variables can't be shared accross jobs, so we push it to artefacts
    - name: Push full version to file
      shell:  bash
      run:  echo ${{ steps.patch-version.outputs.full-version }} >> $assetsName/full-version.txt
    - name: Copy binary into artefact
      shell:  bash
      run:  mv bin/*.gz $assetsName
    # Push archive + version to a sharable artefact
    # See https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs
    - uses: actions/upload-artifact@master
      with:
        name: ${{ env.assetsName }}
        path: ${{ env.assetsName }}

  # Windows job, builds the Windows asset
  windows:

    runs-on: windows-latest
    
    env:
      dotnetOs:  win-x64
      assetsName:  windows-assets
      assetSuffix:  windows
      execName:  delta-kusto.exe

    steps:
    - uses: actions/checkout@v2
    - name: Patch version
      id:  patch-version
      run: python3 deployment/patch-version.py code/delta-kusto/delta-kusto.csproj ${{ github.run_number }}
    - name:  Output full version
      shell:  bash
      run:  |
        echo "Full version:  ${{ steps.patch-version.outputs.full-version }}"
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore
    - name: Install dependencies
      shell:  bash
      run: dotnet restore code
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
    - name: Build
      shell:  bash
      run: dotnet build code --configuration Release --no-restore
    # See https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#user-experience
    # & https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file
    # & https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
    - name: Build single file executable
      shell:  bash
      run: |
        dotnet publish code/delta-kusto -c release -r $dotnetOs \
          -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=true -p:PublishReadyToRun=true \
          -o bin
    - name: Zip executable
      shell:  powershell
      run:  Compress-Archive -Path bin/$execName -DestinationPath bin/delta-kusto-$assetSuffix.zip
    - name: Create artefact directory
      shell:  bash
      run:  mkdir $assetsName
    # Output variables can't be shared accross jobs, so we push it to artefacts
    - name: Push full version to file
      shell:  bash
      run:  echo ${{ steps.patch-version.outputs.full-version }} >> $assetsName/full-version.txt
    - name: Copy binary into artefact
      shell:  bash
      run:  mv bin/*.zip $assetsName
    # Push archive + version to a sharable artefact
    # See https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs
    - uses: actions/upload-artifact@master
      with:
        name: ${{ env.assetsName }}
        path: ${{ env.assetsName }}
