name:  Exec tests

on:  workflow_dispatch

jobs:
  clusterSetup:

    runs-on: ubuntu-latest
    
    steps:
    # Login
    - name: Azure Login
      run: az login --service-principal -u ${{ secrets.deploy_sp_id }} -p ${{ secrets.deploy_sp_secret }} --tenant ${{ secrets.tenant_id }}
    # Add Kusto extension to Azure CLI
    - name: Install Kusto extension
      az extension add -n kusto
    # Turn cluster on
    - name: Turn on cluster (if off)
      run: |
        # Retrieve cluster name
        clusterName=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].name" -o tsv)
        state=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].state" -o tsv)
        echo "Cluster Name:  $clusterName"
        echo "State:  $state"
        if [ "$state" -ne "running" ]
        then
          # Actually start the cluster
          az kusto cluster start -n $clusterName -g ${{ secrets.test_rg }} -n $clusterName
        fi

  linux:
    needs:
    - clusterSetup

    runs-on: ubuntu-latest
    
    env:
      # See OS catalog here:  https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
      dotnetOs:  linux-x64
      exec:  delta-kusto
      deltaDbPrefix:  github_linux_

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore
    - name: Install dependencies
      shell:  bash
      run: dotnet restore code
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
    - name: Build
      shell:  bash
      run: dotnet build code --configuration Release --no-restore
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: Unit Tests
      shell:  bash
      run: |
        dotnet test code/DeltaKustoUnitTest --configuration Release \
        --no-build --verbosity normal
    # See https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#user-experience
    # & https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file
    # & https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
    - name: Build single file executable
      shell:  bash
      run: |
        dotnet publish code/delta-kusto -c release -r $dotnetOs \
          -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=true -p:PublishReadyToRun=true \
          -o bin
    # Login
    - name: Azure Login
      run: az login --service-principal -u ${{ secrets.deploy_sp_id }} -p ${{ secrets.deploy_sp_secret }} --tenant ${{ secrets.tenant_id }}
    # Set environment variables
    - name: Set environment variables
      shell:  bash
      run: |
        # Fetch cluster context
        clusterId=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].id" -o tsv)
        clusterUri=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].uri" -o tsv)
        echo "Cluster ID:  $clusterId"
        echo "Cluster Uri:  $clusterUri"
        # Exec path
        echo "deltaKustoSingleExecPath=$(pwd)/bin/$exec" >> $GITHUB_ENV
        # ADX integration
        echo "deltaKustoClusterId=$clusterId" >> $GITHUB_ENV
        echo "deltaKustoClusterUri=$clusterUri" >> $GITHUB_ENV
        echo "deltaKustoDbPrefix=$deltaDbPrefix" >> $GITHUB_ENV
        echo "deltaKustoTenantId=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
        echo "deltaKustoSpId=${{ secrets.KUSTO_SP_ID }}" >> $GITHUB_ENV
        echo "deltaKustoSpSecret=${{ secrets.KUSTO_SP_SECRET }}" >> $GITHUB_ENV
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: File-based integration tests (out-of-proc)
      shell:  bash
      run: |
        dotnet test code/DeltaKustoFileIntegrationTest \
        --configuration Release --no-build --verbosity normal
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: ADX-based integration tests (out-of-proc)
      shell:  bash
      run: |
        dotnet test code/DeltaKustoAdxIntegrationTest \
        --configuration Release --no-build --verbosity normal

  mac:
    needs:
    - clusterSetup

    # This can run in parallel with the other job as they target different databases
    runs-on: macos-latest
    
    env:
      # See OS catalog here:  https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
      dotnetOs:  osx-x64
      exec:  delta-kusto
      deltaDbPrefix:  github_mac_os_

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore
    - name: Install dependencies
      shell:  bash
      run: dotnet restore code
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
    - name: Build
      shell:  bash
      run: dotnet build code --configuration Release --no-restore
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: Unit Tests
      shell:  bash
      run: |
        dotnet test code/DeltaKustoUnitTest --configuration Release \
        --no-build --verbosity normal
    # See https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#user-experience
    # & https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file
    # & https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
    - name: Build single file executable
      shell:  bash
      run: |
        dotnet publish code/delta-kusto -c release -r $dotnetOs \
          -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:PublishTrimmed=true -p:PublishReadyToRun=true \
          -o bin
    # Login
    - name: Azure Login
      run: az login --service-principal -u ${{ secrets.deploy_sp_id }} -p ${{ secrets.deploy_sp_secret }} --tenant ${{ secrets.tenant_id }}
    # Set environment variables
    - name: Set environment variables
      shell:  bash
      run: |
        # Fetch cluster context
        clusterId=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].id" -o tsv)
        clusterUri=$(az kusto cluster list -g ${{ secrets.test_rg }} --query "[?tags.testLevel=='integration'].uri" -o tsv)
        echo "Cluster ID:  $clusterId"
        echo "Cluster Uri:  $clusterUri"
        # Exec path
        echo "deltaKustoSingleExecPath=$(pwd)/bin/$exec" >> $GITHUB_ENV
        # ADX integration
        echo "deltaKustoClusterId=$clusterId" >> $GITHUB_ENV
        echo "deltaKustoClusterUri=$clusterUri" >> $GITHUB_ENV
        echo "deltaKustoDbPrefix=$deltaDbPrefix" >> $GITHUB_ENV
        echo "deltaKustoTenantId=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
        echo "deltaKustoSpId=${{ secrets.KUSTO_SP_ID }}" >> $GITHUB_ENV
        echo "deltaKustoSpSecret=${{ secrets.KUSTO_SP_SECRET }}" >> $GITHUB_ENV
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: File-based integration tests (out-of-proc)
      shell:  bash
      run: |
        dotnet test code/DeltaKustoFileIntegrationTest \
        --configuration Release --no-build --verbosity normal
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: ADX-based integration tests (out-of-proc)
      shell:  bash
      run: |
        dotnet test code/DeltaKustoAdxIntegrationTest \
        --configuration Release --no-build --verbosity normal

  # windows:
  #   # This can run in parallel with the other job as they target different databases
  #   runs-on: windows-latest
    
  #   env:
  #     # See OS catalog here:  https://docs.microsoft.com/en-us/dotnet/core/rid-catalog
  #     dotnetOs:  win-x64
  #     exec:  delta-kusto
  #     deltaDbPrefix:  github_windows_
