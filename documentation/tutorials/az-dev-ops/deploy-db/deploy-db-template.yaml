parameters:
  env: 'NOT_DEFINE'

jobs:
  - deployment:  delta_kusto
    environment:  ${{ parameters.env }}
    pool:
      vmImage: 'ubuntu-latest'
    variables:  []
    strategy:
      runOnce:    #rolling, canary are the other strategies that are supported
        deploy:
          steps:
          # Bash script:  https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema#bash
          - bash:  |
              clientVersion=$(curl https://delta-kusto.azurefd.net/clientVersion/unique?fromClientVersion=0)
              # Display the version on console
              echo "Client Version:  $clientVersion"
              wget https://github.com/microsoft/delta-kusto/releases/download/$clientVersion/delta-kusto-linux.tar.gz
              tar --extract --file delta-kusto-linux.tar.gz
              chmod +x ./delta-kusto
            displayName:  Install Delta-Kusto
          # Download artefacts:  https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts#download-artifacts
          - download: current
            artifact: state
            displayName:  Download artefact 'state'
          - bash:  |
              root=$(pwd)
              env=${{ parameters.env }}
              stateFolder="$(Pipeline.Workspace)/state"
              echo "Environnement:  $env"
              echo "State folder:  $stateFolder"
              cd documentation/tutorials/az-dev-ops/deploy-db
              clusterUri=$(CLUSTER_URI)
              echo "Cluster URI:  $clusterUri"
              # Package the login in a JSON payload
              login='{"tenantId":"$(TENANT_ID)","clientId":"$(CLIENT_ID)","secret":"$(SECRET)"}'
              $root/delta-kusto -p push-state-to-db-parameters.yaml -o jobs.push-state.current.adx.clusterUri=$clusterUri jobs.push-state.current.adx.database=$env jobs.push-state.target.scripts[0].folderPath=$stateFolder tokenProvider.login=$login
            displayName:  Run Delta-Kusto
