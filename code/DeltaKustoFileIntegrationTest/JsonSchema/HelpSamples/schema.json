{
  "Databases": {
    "Samples": {
      "Name": "Samples",
      "Tables": {
        "StormEvents": {
          "Name": "StormEvents",
          "Folder": "Storm_Events",
          "DocString": "US storm events. Data source: https://www.ncdc.noaa.gov/stormevents",
          "OrderedColumns": [
            {
              "Name": "StartTime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "EndTime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "EpisodeId",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "EventId",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "State",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EventType",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "InjuriesDirect",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "InjuriesIndirect",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "DeathsDirect",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "DeathsIndirect",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "DamageProperty",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "DamageCrops",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "Source",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "BeginLocation",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EndLocation",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "BeginLat",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "BeginLon",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EndLat",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EndLon",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EpisodeNarrative",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EventNarrative",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "StormSummary",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "demo_make_series1": {
          "Name": "demo_make_series1",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "TimeStamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "BrowserVer",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "OsVer",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Country",
              "Type": "System.String",
              "CslType": "string"
            }
          ]
        },
        "demo_series2": {
          "Name": "demo_series2",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "id",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "x",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "y",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "demo_series3": {
          "Name": "demo_series3",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "id",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "t",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "num",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "demo_many_series1": {
          "Name": "demo_many_series1",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "TIMESTAMP",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Loc",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Op",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "DB",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "DataRead",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ]
        },
        "ConferenceSessions": {
          "Name": "ConferenceSessions",
          "Folder": "ADX_Conferences",
          "OrderedColumns": [
            {
              "Name": "conference",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "sessionid",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "session_title",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "session_type",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "owner",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "participants",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "URL",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "level",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "session_location",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "starttime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "duration",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "time_and_duration",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "kusto_affinity",
              "Type": "System.String",
              "CslType": "string"
            }
          ]
        },
        "demo_make_series2": {
          "Name": "demo_make_series2",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "sid",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "TimeStamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "num",
              "Type": "System.Double",
              "CslType": "real"
            }
          ]
        },
        "demo_clustering1": {
          "Name": "demo_clustering1",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "PreciseTimeStamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Region",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "ScaleUnit",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "DeploymentId",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Tracepoint",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "ServiceHost",
              "Type": "System.String",
              "CslType": "string"
            }
          ]
        },
        "Covid19_Bing": {
          "Name": "Covid19_Bing",
          "Folder": "Covid19",
          "DocString": "Data source: https://bing.com/covid19",
          "OrderedColumns": [
            {
              "Name": "Location",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Confirmed",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Active",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Deaths",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Recovered",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "ReportDate",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Id",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "LastUpdated",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "LastRefreshed",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Sources",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "AreaInfo",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Location_1",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "ReportDate_1",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "LastUpdated_1",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "LastRefreshed_1",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Sources_1",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "Covid19_map2": {
          "Name": "Covid19_map2",
          "Folder": "Covid19",
          "OrderedColumns": [
            {
              "Name": "AreaInfo",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Location",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Confirmed",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Active",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Deaths",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Recovered",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "ReportDate",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Id",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "LastUpdated",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "LastRefreshed",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Sources",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "US_States": {
          "Name": "US_States",
          "Folder": "Geospatial",
          "DocString": "US States. Data source: https://www.census.gov/geographies/mapping-files/time-series/geo/cartographic-boundary.html",
          "OrderedColumns": [
            {
              "Name": "features",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "US_Counties": {
          "Name": "US_Counties",
          "Folder": "Geospatial",
          "DocString": "US Counties. Data source: https://www.census.gov/geographies/mapping-files/time-series/geo/cartographic-boundary.html",
          "OrderedColumns": [
            {
              "Name": "features",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "Covid19": {
          "Name": "Covid19",
          "Folder": "Covid19",
          "OrderedColumns": [
            {
              "Name": "Timestamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Country",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "State",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "CountryCode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "StateCode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Latitute",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "Longtitude",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "Confirmed",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "Deaths",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "Recovered",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "Active",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ]
        },
        "irregular_ts": {
          "Name": "irregular_ts",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "OsVer",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "TimeStamp",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "num",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ]
        },
        "demo_prometheus": {
          "Name": "demo_prometheus",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "TimeStamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Name",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Labels",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "Val",
              "Type": "System.Double",
              "CslType": "real"
            }
          ]
        },
        "PopulationData": {
          "Name": "PopulationData",
          "OrderedColumns": [
            {
              "Name": "State",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "Population",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ]
        },
        "OccupancyDetection": {
          "Name": "OccupancyDetection",
          "Folder": "TimeSeries_and_ML",
          "OrderedColumns": [
            {
              "Name": "Timestamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Temperature",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "Humidity",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "Light",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "CO2",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "HumidityRatio",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "Occupancy",
              "Type": "System.SByte",
              "CslType": "bool"
            },
            {
              "Name": "Test",
              "Type": "System.SByte",
              "CslType": "bool"
            }
          ]
        },
        "table041121": {
          "Name": "table041121",
          "OrderedColumns": [
            {
              "Name": "StartTime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "EndTime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "EpisodeId",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "EventId",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "State",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EventType",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "InjuriesDirect",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "InjuriesIndirect",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "DeathsDirect",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "DeathsIndirect",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "DamageProperty",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "DamageCrops",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "Source",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "BeginLocation",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EndLocation",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "BeginLat",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "BeginLon",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EndLat",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EndLon",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "EpisodeNarrative",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "EventNarrative",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "StormSummary",
              "Type": "System.String",
              "CslType": "string"
            }
          ]
        }
      },
      "MajorVersion": 3296,
      "MinorVersion": 4,
      "Functions": {
        "MyFunction1": {
          "Name": "MyFunction1",
          "InputParameters": [],
          "Body": "{     StormEvents     | limit 100 }  ",
          "Folder": "Demo",
          "DocString": "Simple demo function",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction2": {
          "Name": "MyFunction2",
          "InputParameters": [
            {
              "Name": "myLimit",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ],
          "Body": "{     StormEvents     | limit myLimit }  ",
          "Folder": "Demo",
          "DocString": "Demo function with parameter",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction3": {
          "Name": "MyFunction3",
          "InputParameters": [],
          "Body": "{     MyFunction(100) }  ",
          "Folder": "Demo",
          "DocString": "Function calling other function",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction4": {
          "Name": "MyFunction4",
          "InputParameters": [],
          "Body": "{\r\n    let limitVar = 100;\r\n    let result = MyFunction(limitVar);\r\n    result\r\n} ",
          "Folder": "Demo",
          "DocString": "Function calling other function",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction": {
          "Name": "MyFunction",
          "InputParameters": [
            {
              "Name": "someLimit",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ],
          "Body": "{\r\n    StormEvents\r\n    | limit someLimit\r\n} ",
          "Folder": "Demo",
          "DocString": "Simple demo function",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "InterestingStates": {
          "Name": "InterestingStates",
          "InputParameters": [],
          "Body": "{\r\n    dynamic([\"WASHINGTON\", \"FLORIDA\", \"GEORGIA\", \"NEW YORK\"])\r\n}",
          "Folder": "Helpers",
          "DocString": "A list of interesting states",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "Trim": {
          "Name": "Trim",
          "InputParameters": [
            {
              "Name": "text",
              "Type": "System.String",
              "CslType": "string"
            }
          ],
          "Body": "{extract(@\"\\s*(.*)\",1,text)}",
          "Folder": "Demo",
          "DocString": "Remove Spaces",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyCalc": {
          "Name": "MyCalc",
          "InputParameters": [
            {
              "Name": "a",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "b",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "c",
              "Type": "System.Double",
              "CslType": "real"
            }
          ],
          "Body": "{a+b+c}",
          "Folder": "",
          "DocString": "",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction5": {
          "Name": "MyFunction5",
          "InputParameters": [
            {
              "Name": "myLimit",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ],
          "Body": "{StormEvents | limit myLimit}\n",
          "Folder": "Demo",
          "DocString": "Demo function with parameter",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "Add": {
          "Name": "Add",
          "InputParameters": [
            {
              "Name": "a",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "b",
              "Type": "System.Double",
              "CslType": "real"
            }
          ],
          "Body": "{a+b}",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunctionDate": {
          "Name": "MyFunctionDate",
          "InputParameters": [
            {
              "Name": "timestamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            }
          ],
          "Body": "{\r\n    StormEvents\r\n    | where EndTime <= timestamp\r\n}",
          "Folder": "Demo",
          "DocString": "Demo function with date",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "MyFunction6": {
          "Name": "MyFunction6",
          "InputParameters": [
            {
              "Name": "myLimit",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ],
          "Body": "{StromEvents | limit myLimit}",
          "Folder": "Demo",
          "DocString": "demo function with parameter",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "StormsReportedBySource": {
          "Name": "StormsReportedBySource",
          "InputParameters": [
            {
              "Name": "source",
              "Type": "System.String",
              "CslType": "string"
            }
          ],
          "Body": "{\r\n    StormEvents\r\n    | where Source == source\r\n}",
          "Folder": "StormEventsFunctions",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "TableAccess": {
          "Name": "TableAccess",
          "InputParameters": [
            {
              "Name": "tableName",
              "Type": "System.String",
              "CslType": "string"
            }
          ],
          "Body": "{\r\n    table(tableName) | count\r\n}",
          "DocString": "Table access example",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "DirectTableAccess": {
          "Name": "DirectTableAccess",
          "InputParameters": [
            {
              "Columns": [],
              "Name": "myTable"
            }
          ],
          "Body": "{\r\n    myTable | count\r\n}",
          "DocString": "Direct table access example",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "get_modules_version_sf": {
          "Name": "get_modules_version_sf",
          "InputParameters": [
            {
              "Columns": [],
              "Name": "modules"
            }
          ],
          "Body": "{\r\n    let code =\r\n    'import importlib\\n'\r\n    'import sys\\n'\r\n    '\\n'\r\n    'result = df\\n'\r\n    'for i in range(df.shape[0]):\\n'\r\n    '    try:\\n'\r\n    '        m = importlib.import_module(df.iloc[i, 0])\\n'\r\n    '        result.loc[i, \"ver\"] = m.__version__ if hasattr(m, \"__version__\") else \"missing __version__ attribute\"\\n'\r\n    '    except Exception as ex:\\n'\r\n    '        result.loc[i, \"ver\"] = \"ERROR: \" + (ex.msg if hasattr(ex, \"msg\") else \"exception, no msg\")\\n'\r\n    'id = df.shape[0]\\n'\r\n    'result.loc[id, df.columns[0]] = \"Python\"\\n'\r\n    'result.loc[id, \"ver\"] = sys.version\\n';\r\n    modules | evaluate python(code, 'df(*),ver:string')\r\n}",
          "Folder": "Packages\\Utils",
          "DocString": "Returns version information for the Python engine and the specified packages",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "StormsReportedByStateAndSource": {
          "Name": "StormsReportedByStateAndSource",
          "InputParameters": [
            {
              "Name": "state",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "source",
              "Type": "System.String",
              "CslType": "string"
            }
          ],
          "Body": "{\r\n    StormEvents\r\n    | where State == state\r\n    | where Source == source\r\n}",
          "Folder": "StormEventsFunctions",
          "DocString": "",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "StormEventsStates": {
          "Name": "StormEventsStates",
          "InputParameters": [],
          "Body": "{\r\n    StormEvents\r\n    | summarize by State\r\n}",
          "Folder": "StormEventsFunctions",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "PQ_ComplexTableParam": {
          "Name": "PQ_ComplexTableParam",
          "InputParameters": [
            {
              "Columns": [
                {
                  "Name": "a",
                  "Type": "System.String",
                  "CslType": "string"
                },
                {
                  "Name": "b",
                  "Type": "System.Int32",
                  "CslType": "int"
                },
                {
                  "Name": "c\"",
                  "Type": "System.TimeSpan",
                  "CslType": "timespan"
                }
              ],
              "Name": "d"
            },
            {
              "Columns": [],
              "Name": "q"
            },
            {
              "Name": "j",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "e",
              "Type": "System.SByte",
              "CslType": "bool",
              "CslDefaultValue": "true"
            },
            {
              "Name": "f",
              "Type": "System.String",
              "CslType": "string",
              "CslDefaultValue": "\"TestDefault\""
            },
            {
              "Name": "g",
              "Type": "System.Int32",
              "CslType": "int",
              "CslDefaultValue": "42"
            },
            {
              "Name": "h",
              "Type": "System.Int64",
              "CslType": "long",
              "CslDefaultValue": "345678"
            },
            {
              "Name": "i",
              "Type": "System.Double",
              "CslType": "real",
              "CslDefaultValue": "real(+inf)"
            },
            {
              "Name": "k",
              "Type": "System.Double",
              "CslType": "real",
              "CslDefaultValue": "0.444"
            },
            {
              "Name": "l",
              "Type": "System.TimeSpan",
              "CslType": "timespan",
              "CslDefaultValue": "time(1.00:00:00)"
            },
            {
              "Name": "m",
              "Type": "System.Data.SqlTypes.SqlDecimal",
              "CslType": "decimal",
              "CslDefaultValue": "decimal(0.33)"
            },
            {
              "Name": "n",
              "Type": "System.DateTime",
              "CslType": "datetime",
              "CslDefaultValue": "datetime(2000-01-01T12:34:56.7890000Z)"
            },
            {
              "Name": "o",
              "Type": "System.DateTime",
              "CslType": "datetime",
              "CslDefaultValue": "datetime(2021-04-28T15:30:12.0507382Z)"
            },
            {
              "Name": "p",
              "Type": "System.Data.SqlTypes.SqlDecimal",
              "CslType": "decimal",
              "CslDefaultValue": "decimal(100000)"
            },
            {
              "Name": "r",
              "Type": "System.Guid",
              "CslType": "guid",
              "CslDefaultValue": "guid(74be27de-1e4e-49d9-b579-fe0b331d3642)"
            },
            {
              "Name": "s",
              "Type": "System.String",
              "CslType": "string",
              "CslDefaultValue": "\"\\'\""
            }
          ],
          "Body": "{\r\n    d\r\n}",
          "Folder": "PQTest",
          "DocString": "Test Doc",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "JoinCorona": {
          "Name": "JoinCorona",
          "InputParameters": [],
          "Body": "{\r\nCoronaConfirmed\r\n| extend Confirmed= Count\r\n| join kind=fullouter \r\n(CoronaDeaths | extend Deaths = Count) on ProvinceOrState, CountryOrRegion, Timestamp\r\n| join kind=fullouter \r\n(CoronaRecovered | extend Recovered = Count) on ProvinceOrState, CountryOrRegion, Timestamp\r\n| project Timestamp, CountryOrRegion, ProvinceOrState, Confirmed, Deaths, Recovered, Lat, Long\r\n| where Confirmed >0 or Deaths > 0 or Recovered > 0\r\n}",
          "Folder": "CoronaVirus",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "UpdateCovidCountries": {
          "Name": "UpdateCovidCountries",
          "InputParameters": [],
          "Body": "{\nlet lastRefreshed = toscalar(CovidCountries | summarize max(LastRefreshed)); \nlet newRefreshed = toscalar(externaldata(d:string)[\"https://binganswer.blob.core.windows.net/cssegisanddata/Covid19.Country.json\"]\r\nwith(format=txt)\r\n| mv-expand todynamic(d)\n| evaluate bag_unpack(d)\n| summarize max(LastRefreshed));\nlet RequiresUpdate = lastRefreshed < newRefreshed; \nexternaldata(d:string)[\"https://binganswer.blob.core.windows.net/cssegisanddata/Covid19.Country.json\"]\r\nwith(format=txt)\r\n| mv-expand todynamic(d)\r\n| evaluate bag_unpack(d)\r\n| project ReportDate, LastUpdated, LastRefreshed, Country, Province, Latitude, Longitude, Confirmed, ConfirmedChange, Recovered, RecoveredChange, Deaths, DeathsChange, Active\n| join kind=leftanti\n(\n    CovidCountries |summarize arg_max(LastRefreshed, *) by Country, Province\n) on Country, Province, Confirmed, Recovered, Deaths\n| where RequiresUpdate \n}",
          "Folder": "CoronaVirus",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "Covid19_flat": {
          "Name": "Covid19_flat",
          "InputParameters": [],
          "Body": "{    \r\n    let Historic =\r\n    Covid19_Bing\r\n    | extend Id = iff(Id == \"/\" and isnotempty(Location.CountryName) and Location.CountryName != \"Worldwide\", strcat('/', Location.CountryName), Id)\r\n    | project \r\n        ReportDate,\r\n        Country = tostring(Location.CountryName),\r\n        Longitude = toreal(Location.Longitude),\r\n        Latitude = toreal(Location.Latitude),\r\n        Confirmed = tolong(Confirmed.Value), ConfirmedChange = tolong(Confirmed.Change), \r\n        Active = tolong(Active.Value), ActiveChange = tolong(Active.Change), \r\n        Deaths = tolong(Deaths.Value), DeathsChange = tolong(Deaths.Change),\r\n        Id,  \r\n        Location;\r\n     let IdMap = Historic | where ReportDate > ago(5d) | extend State = Location.StateCode | extend StateOrCountry= iff(isempty(State), Country, State) |  summarize by StateOrCountry, Id;         \r\n     let Recent = Covid19_map2 \r\n        | project \r\n                ReportDate = LastUpdated,\r\n                Country = tostring(AreaInfo.CountryName),\r\n                Longitude = todouble(AreaInfo.Longitude),\r\n                Latitude = todouble(AreaInfo.Latitude),\r\n                Confirmed = tolong(Confirmed.Value), ConfirmedChange = tolong(Confirmed.Change),\r\n                Active = tolong(Active.Value), ActiveChange = tolong(Active.Change),\r\n                Deaths = tolong(Deaths.Value), DeathsChange = tolong(Deaths.Change),\r\n                Recovered = tolong(Recovered.Value), RecoveredChange = tolong(Recovered.Change),\r\n                State = tostring(AreaInfo.StateName)\r\n        | extend Active = iff(isempty(Active) and Confirmed >0 , Confirmed - Deaths - iff(isempty(Recovered), 0, Recovered), Active)\r\n        | extend StateOrCountry = iff(isempty(State), Country, State)\r\n        | join (IdMap) on StateOrCountry | project-away StateOrCountry, StateOrCountry1, State\r\n        | summarize arg_max(ReportDate, *) by Id;\r\n        Historic | union Recent\r\n}",
          "Folder": "Covid19_Bing",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "temp": {
          "Name": "temp",
          "InputParameters": [],
          "Body": "{    \r\n    let Historic =\r\n    Covid19_Bing\r\n    | extend Id = iff(Id == \"/\" and isnotempty(Location.CountryName) and Location.CountryName != \"Worldwide\", strcat('/', Location.CountryName), Id)\r\n    | project \r\n        ReportDate,\r\n        Country = tostring(Location.CountryName),\r\n        Longitude = toreal(Location.Longitude),\r\n        Latitude = toreal(Location.Latitude),\r\n        Confirmed = tolong(Confirmed.Value), ConfirmedChange = tolong(Confirmed.Change), \r\n        Active = tolong(Active.Value), ActiveChange = tolong(Active.Change), \r\n        Deaths = tolong(Deaths.Value), DeathsChange = tolong(Deaths.Change),\r\n        Id,  \r\n        Location;\r\n     let IdMap = Historic | where ReportDate > ago(5d) | extend State = Location.StateCode | extend StateOrCountry= iff(isempty(State), Country, State) |  summarize by StateOrCountry, Id;         \r\n     let Recent = Covid19_map2 \r\n        | project \r\n                ReportDate = LastUpdated,\r\n                Country = tostring(AreaInfo.CountryName),\r\n                Longitude = todouble(AreaInfo.Longitude),\r\n                Latitude = todouble(AreaInfo.Latitude),\r\n                Confirmed = tolong(Confirmed.Value), ConfirmedChange = tolong(Confirmed.Change),\r\n                Active = tolong(Confirmed.Value), ActiveChange = tolong(Confirmed.Change),\r\n                Deaths = tolong(Deaths.Value), DeathsChange = tolong(Deaths.Change),\r\n                State = tostring(AreaInfo.StateName)\r\n        | extend StateOrCountry = iff(isempty(State), Country, State)\r\n        | join (IdMap) on StateOrCountry | project-away StateOrCountry, StateOrCountry1, State;\r\n        Historic | union Recent\r\n}",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_moving_avg_fl": {
          "Name": "series_moving_avg_fl",
          "InputParameters": [
            {
              "Name": "y_series",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "n",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "center",
              "Type": "System.SByte",
              "CslType": "bool",
              "CslDefaultValue": "false"
            }
          ],
          "Body": "{\r\n    series_fir(y_series, repeat(1, n), true, center)\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Calculate moving average of specified width",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_dot_product_fl": {
          "Name": "series_dot_product_fl",
          "InputParameters": [
            {
              "Name": "vec1",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "vec2",
              "Type": "System.Object",
              "CslType": "dynamic"
            }
          ],
          "Body": "{\r\n    let elem_prod = series_multiply(vec1, vec2);\r\n    let cum_sum = series_iir(elem_prod, dynamic([1]), dynamic([1,-1]));\r\n    todouble(cum_sum[-1])\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Calculate the dot product of 2 numerical arrays",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_exp_smoothing_fl": {
          "Name": "series_exp_smoothing_fl",
          "InputParameters": [
            {
              "Name": "y_series",
              "Type": "System.Object",
              "CslType": "dynamic"
            },
            {
              "Name": "alpha",
              "Type": "System.Double",
              "CslType": "real",
              "CslDefaultValue": "0.5"
            }
          ],
          "Body": "{\r\n    series_iir(y_series, pack_array(alpha), pack_array(1, alpha-1))\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Basic exponential smoothing for a series",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_downsample_fl": {
          "Name": "series_downsample_fl",
          "InputParameters": [
            {
              "Columns": [],
              "Name": "tbl"
            },
            {
              "Name": "t_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "y_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "ds_t_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "ds_y_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "sampling_factor",
              "Type": "System.Int32",
              "CslType": "int"
            }
          ],
          "Body": "{\r\n    tbl\r\n    | extend _t_ = column_ifexists(t_col, dynamic(0)), _y_ = column_ifexists(y_col, dynamic(0))\r\n    | extend _y_ = series_fir(_y_, repeat(1, sampling_factor), true, true)    //  apply a simple low pass filter before sub-sampling\r\n    | mv-apply _t_ to typeof(DateTime), _y_ to typeof(double) on\r\n    (extend rid=row_number()-1\r\n    | where rid % sampling_factor == ceiling(sampling_factor/2.0)-1                    //  sub-sampling\r\n    | summarize _t_ = make_list(_t_), _y_ = make_list(_y_))\r\n    | extend cols = pack(ds_t_col, _t_, ds_y_col, _y_)\r\n    | project-away _t_, _y_\r\n    | evaluate bag_unpack(cols)\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Downsampling a series by an integer factor",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_metric_fl": {
          "Name": "series_metric_fl",
          "InputParameters": [
            {
              "Columns": [],
              "Name": "metrics_tbl"
            },
            {
              "Name": "timestamp_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "name_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "labels_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "value_col",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "metric_name",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "labels_selector",
              "Type": "System.String",
              "CslType": "string",
              "CslDefaultValue": "\"\""
            },
            {
              "Name": "lookback",
              "Type": "System.TimeSpan",
              "CslType": "timespan",
              "CslDefaultValue": "time(00:10:00)"
            },
            {
              "Name": "offset",
              "Type": "System.TimeSpan",
              "CslType": "timespan",
              "CslDefaultValue": "time(00:00:00)"
            }
          ],
          "Body": "{\r\n    let selector_d=iff(labels_selector == '', dynamic(['']), split(labels_selector, ','));\r\n    let etime = ago(offset);\r\n    let stime = etime - lookback;\r\n    metrics_tbl\r\n    | extend timestamp = column_ifexists(timestamp_col, datetime(null)), name = column_ifexists(name_col, ''), labels = column_ifexists(labels_col, dynamic(null)), value = column_ifexists(value_col, 0)\r\n    | extend labels = dynamic_to_json(labels)       //  convert to string and sort by key\r\n    | where name == metric_name and timestamp between(stime..etime)\r\n    | order by timestamp asc\r\n    | summarize timestamp = make_list(timestamp), value=make_list(value) by name, labels\r\n    | where labels has_all (selector_d)\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Selecting & retrieving metrics like PromQL",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "series_rate_fl": {
          "Name": "series_rate_fl",
          "InputParameters": [
            {
              "Columns": [
                {
                  "Name": "timestamp",
                  "Type": "System.Object",
                  "CslType": "dynamic"
                },
                {
                  "Name": "value",
                  "Type": "System.Object",
                  "CslType": "dynamic"
                }
              ],
              "Name": "tbl"
            },
            {
              "Name": "n_bins",
              "Type": "System.Int32",
              "CslType": "int",
              "CslDefaultValue": "1"
            },
            {
              "Name": "fix_reset",
              "Type": "System.SByte",
              "CslType": "bool",
              "CslDefaultValue": "true"
            }
          ],
          "Body": "{\r\n    tbl\r\n    | where fix_reset                                                   //  Prometheus counters can only go up\r\n    | mv-apply value to typeof(double) on   \r\n    ( extend correction = iff(value < prev(value), prev(value), 0.0)    // if the value decreases we assume it was reset to 0, so add last value\r\n    | extend cum_correction = row_cumsum(correction)\r\n    | extend corrected_value = value + cum_correction\r\n    | summarize value = make_list(corrected_value))\r\n    | union (tbl | where not(fix_reset))\r\n    | extend timestampS = array_shift_right(timestamp, n_bins), valueS = array_shift_right(value, n_bins)\r\n    | extend dt = series_subtract(timestamp, timestampS)\r\n    | extend dt = series_divide(dt, 1e7)                              //  converts from ticks to seconds\r\n    | extend dv = series_subtract(value, valueS)\r\n    | extend rate = series_divide(dv, dt)\r\n    | project-away dt, dv, timestampS, value, valueS\r\n}",
          "Folder": "Packages\\Series",
          "DocString": "Simulate PromQL rate()",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "GetStatesWithPopulationSmallerThan": {
          "Name": "GetStatesWithPopulationSmallerThan",
          "InputParameters": [
            {
              "Name": "amount",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ],
          "Body": "{ \n    PopulationData\n    | where Population < amount\n    | project State;\n}",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "factorial_fl": {
          "Name": "factorial_fl",
          "InputParameters": [
            {
              "Name": "n",
              "Type": "System.Int32",
              "CslType": "int"
            }
          ],
          "Body": "{\r\n    tolong(gamma(n+1))\r\n}",
          "Folder": "Packages\\Stats",
          "DocString": "Calculate factorial",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "perm_fl": {
          "Name": "perm_fl",
          "InputParameters": [
            {
              "Name": "n",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "k",
              "Type": "System.Int32",
              "CslType": "int"
            }
          ],
          "Body": "{\r\n    let fact_n = gamma(n+1);\r\n    let fact_nk = gamma(n-k+1);\r\n    tolong(fact_n/fact_nk)\r\n}",
          "Folder": "Packages\\Stats",
          "DocString": "Calculate number of combinations of selecting k items from total n items with order",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        },
        "comb_fl": {
          "Name": "comb_fl",
          "InputParameters": [
            {
              "Name": "n",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "k",
              "Type": "System.Int32",
              "CslType": "int"
            }
          ],
          "Body": "{\r\n    let fact_n = gamma(n+1);\r\n    let fact_nk = gamma(n-k+1);\r\n    let fact_k = gamma(k+1);\r\n    tolong(fact_n/fact_nk/fact_k)\r\n}",
          "Folder": "Packages\\Stats",
          "DocString": "Calculate number of combinations for selection of k items out of n items without order",
          "FunctionKind": "Unknown",
          "OutputColumns": []
        }
      },
      "DatabaseAccessMode": "ReadWrite",
      "ExternalTables": {
        "TaxiRides": {
          "Name": "TaxiRides",
          "Folder": "ExternalTables",
          "DocString": "NYC taxi rides. Data source: https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page",
          "OrderedColumns": [
            {
              "Name": "trip_id",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "vendor_id",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_datetime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "dropoff_datetime",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "store_and_fwd_flag",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "rate_code_id",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "pickup_longitude",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "pickup_latitude",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "dropoff_longitude",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "dropoff_latitude",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "passenger_count",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "trip_distance",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "fare_amount",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "extra",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "mta_tax",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "tip_amount",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "tolls_amount",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "ehail_fee",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "improvement_surcharge",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "total_amount",
              "Type": "System.Double",
              "CslType": "real"
            },
            {
              "Name": "payment_type",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "trip_type",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "pickup",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "cab_type",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "precipitation",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "snow_depth",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "snowfall",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "max_temperature",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "min_temperature",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "average_wind_speed",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "pickup_nyct2010_gid",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "pickup_ctlabel",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_borocode",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "pickup_boroname",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_ct2010",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_boroct2010",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_cdeligibil",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_ntacode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_ntaname",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "pickup_puma",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_nyct2010_gid",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "dropoff_ctlabel",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_borocode",
              "Type": "System.Int32",
              "CslType": "int"
            },
            {
              "Name": "dropoff_boroname",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_ct2010",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_boroct2010",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_cdeligibil",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_ntacode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_ntaname",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "dropoff_puma",
              "Type": "System.String",
              "CslType": "string"
            }
          ]
        }
      },
      "MaterializedViews": {
        "DailyCovid19": {
          "Name": "DailyCovid19",
          "Folder": "Covid19",
          "OrderedColumns": [
            {
              "Name": "Timestamp",
              "Type": "System.DateTime",
              "CslType": "datetime"
            },
            {
              "Name": "Country",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "State",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "CountryCode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "StateCode",
              "Type": "System.String",
              "CslType": "string"
            },
            {
              "Name": "max_Confirmed",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "max_Deaths",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "max_Recovered",
              "Type": "System.Int64",
              "CslType": "long"
            },
            {
              "Name": "max_Active",
              "Type": "System.Int64",
              "CslType": "long"
            }
          ]
        }
      }
    }
  }
}